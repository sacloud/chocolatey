<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <id>usacloud</id>
    <version>0.0.11</version>
    <owners>223n (@223n)</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <title>usacloud (Install)</title>
    <authors>Kazumichi Yamamoto (@yamamoto-febc)</authors>
    <projectUrl>https://github.com/sacloud/usacloud</projectUrl>
    <!--<projectSourceUrl>https://github.com/sacloud/usacloud</projectSourceUrl>-->
    <iconUrl>https://cdn.rawgit.com/sacloud/images/1fe15a73/usacloud_logo.svg</iconUrl>
    <copyright>Kazumichi Yamamoto (@yamamoto-febc)</copyright>
    <licenseUrl>https://github.com/sacloud/usacloud/blob/master/LICENSE.txt</licenseUrl>
    <docsUrl>https://sacloud.github.io/usacloud//</docsUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <packageSourceUrl>https://github.com/sacloud/chocolatey</packageSourceUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <!--<bugTrackerUrl></bugTrackerUrl>-->
    <tags>admin sakuracloud cli</tags>
    <summary>usacloud</summary>
    <description>
# EN
  - "usacloud" is a CLI client for Sakura Cloud.

## Major features
  - Following the latest function of "SAKURA Cloud". Billing information, object store, web accelerator, etc. can also be used.
  - Support for cross-platform version (Windows / macOS / Linux) It can also be executed with ARM.
  - Single binary implemented in Go language. Installation method is only binary copy. (yum / apt / brew is also supported)
  - Supports SSH / SCP / SFTP / VNC etc. only with "binary".

----

# JP
  - "usacloud"は、さくらクラウド用のCLIクライアントです。

## 主な特徴
  - さくらクラウドの最新機能に追随。請求情報やオブジェクトストレージ、ウェブアクセラレータなども対応済み
  - クロスプラットフォーム(Windows/macOS/Linux)サポート。ARMでも動作可能。
  - Go言語で実装されたシングルバイナリ、インストールはバイナリをコピーするだけ(yum/apt/brewもサポート)
  - SSH/SCP/SFTP/VNCなどをバイナリ単体でサポート
    </description>
    <releaseNotes>
# EN
## ChangeLog
  - Support linuxbrew #138
  - Add "--format-file" option #139
  - Using "Go 1.8 (latest)" at build time #140
  - "go generate" correspondence on Windows #144
  - Organize files generated by "go generate" #145
  - Add "Copy source archive / Disk ID search parameter" #146
  - Command parameter template correspondence #149
  - Skeleton output function of parameter file #150
  - Fixed option setting process from environment variable #153

## About parameter template / skeleton output
  - It is a function to output the options given to the command in advance as an external file (JSON format).
  - Therefore, a function to output a skeleton is added for each command.
  - This saves labor when there are many options such as "server build". 

----

# JP
## ChangeLog
  - linuxbrew対応 #138
  - --format-fileオプションの追加 #139
  - ビルド時にGo1.8(latest)を利用 #140
  - Windows上でのgo generate対応 #144
  - go generateで生成されるファイルの整理 #145
  - コピー元アーカイブ/ディスクID検索パラメータ追加 #146
  - コマンドパラメータのテンプレート対応 #149
  - パラメータファイルのスケルトン出力機能 #150
  - 環境変数からのオプション設定処理修正 #153

## パラメータテンプレート/スケルトン出力について
  - あらかじめコマンドに与えるオプションを外部ファイル(JSON)化する機能です。
  - 各コマンドごとにスケルトンを出力する機能も合わせて追加されています。
  - これにより、server buildなどの、オプションが多数ある場合の指定を省力化します。
    </releaseNotes>
    <!-- =============================== -->      
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
